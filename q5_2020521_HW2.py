# -*- coding: utf-8 -*-
"""Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15yUKPWu8x7B_d0ffiqoqMmQOsTGbgxLp
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import matplotlib.pyplot as plt
from PIL import Image

'''Defining our parths and bringing everything here.'''
base_path = '/content/drive/My Drive/CV-A2-calibration/'
images_dir = os.path.join(base_path, 'camera_images')
lidar_dir = os.path.join(base_path, 'lidar_scans')
params_dir = os.path.join(base_path, 'camera_parameters')

'''
We write the code to display the images from the image directory.
'''
def display_images(images_dir):
    image_files = os.listdir(images_dir) # Access the directory
    for img_file in image_files: # for each file in the directory
        img_path = os.path.join(images_dir, img_file) # get the image path
        img = Image.open(img_path) # using the path of the image open the image
        plt.imshow(img) # show the image using matplotlib
        plt.axis('off')
        plt.title(img_file)
        plt.show()

# Function to read lidar scans
def read_lidar_scans(lidar_dir):
    lidar_files = os.listdir(lidar_dir) # Access the directory
    for lidar_file in lidar_files:
        with open(os.path.join(lidar_dir, lidar_file), 'rb') as f:  # Open in binary mode
            lidar_data = f.read()
            print(f"Lidar scan file: {lidar_file}")
            print(lidar_data)

# Function to read camera parameters
def read_camera_parameters(params_dir):
    # Filter out subdirectories. Since there are directories within the directory.
    params_files = [file for file in os.listdir(params_dir) if os.path.isfile(os.path.join(params_dir, file))]

    # Iterate over files
    for params_file in params_files:
        with open(os.path.join(params_dir, params_file), 'rb') as f:  # Open in binary mode
            params_data = f.read()
            print(f"Camera parameters file: {params_file}")
            print(params_data)

print("Displaying images:")
display_images(images_dir)

# Read lidar scans
print("\nReading lidar scans:")
read_lidar_scans(lidar_dir)
'''It does not print anything informative because we are reading the file in binary mode.'''

# Read camera parameters
print("\nReading camera parameters:")
read_camera_parameters(params_dir)

!pip install pyntcloud

from pyntcloud import PyntCloud
import os

# Define the directory containing the LIDAR scans
lidar_scans_dir = '/content/drive/My Drive/CV-A2-calibration/lidar_scans'

num_files_to_display = 5 # Define the number of files you want to display

lidar_files = os.listdir(lidar_scans_dir) # Get list of files in the directory

# Iterate and display the LIDAR point clouds
for lidar_file in lidar_files[:num_files_to_display]:
    lidar_scan_path = os.path.join(lidar_scans_dir, lidar_file) # get the full path to the LIDAR scan file

    lidar_cloud = PyntCloud.from_file(lidar_scan_path)# Load LIDAR scan

    # Plot the point cloud
    lidar_cloud.plot()

"""# 1 = Computing plane normals"""

import os
from pyntcloud import PyntCloud
import numpy as np

def compute_plane_normals_offsets(lidar_dir, num_scans):
    plane_normals = [] # to store the plane normals
    offsets = [] # to store the point offsets.

    lidar_files = os.listdir(lidar_dir)# Get list of files in the directory

    for lidar_file in lidar_files[:num_scans]:# Iterate over a specified number of scans

        lidar_scan_path = os.path.join(lidar_dir, lidar_file) # get the full path to the LIDAR scan file

        lidar_cloud = PyntCloud.from_file(lidar_scan_path) # store LIDAR scan

        planar_points = lidar_cloud.points # Get planar points

        # Apply Singular Value Decomposition (SVD)
        _, _, vh = np.linalg.svd(planar_points, full_matrices=False)

        # Plane normal is the last row of vh
        plane_normal = vh[-1]
        plane_normals.append(plane_normal)

        # Compute offset d from the origin to the plane
        offset = -np.dot(plane_normal, planar_points.mean(axis=0))
        offsets.append(offset)

    return plane_normals, offsets

# Define the directory containing the LIDAR scans
lidar_scans_dir = '/content/drive/My Drive/CV-A2-calibration/lidar_scans'

# Define the number of scans to iterate over
num_scans = 25

# Compute plane normals and offsets
plane_normals, offsets = compute_plane_normals_offsets(lidar_scans_dir, num_scans)

# Display results
for i, (normal, offset) in enumerate(zip(plane_normals, offsets), 1):
    print(f"Plane {i}: Normal = {normal}, Offset = {offset}")

"""# First we will store the data together"""

import os
import pandas as pd
from pyntcloud import PyntCloud
import numpy as np

def compute_plane_normals_offsets(lidar_dir):
    data = []

    # Get list of files in the directory
    lidar_files = os.listdir(lidar_dir)

    # Iterate over all lidar files
    for lidar_file in lidar_files:
        # Construct the full path to the LIDAR scan file
        lidar_scan_path = os.path.join(lidar_dir, lidar_file)

        # Load LIDAR scan
        lidar_cloud = PyntCloud.from_file(lidar_scan_path)

        # Get planar points
        planar_points = lidar_cloud.points

        # Apply Singular Value Decomposition (SVD)
        _, _, vh = np.linalg.svd(planar_points, full_matrices=False)

        # Plane normal is the last row of vh
        plane_normal = vh[-1]

        # Compute offset d from the origin to the plane
        offset = -np.dot(plane_normal, planar_points.mean(axis=0))

        # Append data to the list
        data.append({'File_Name': lidar_file, 'Plane_Normal': plane_normal, 'Offset': offset})

    # Convert list of dictionaries to DataFrame
    df = pd.DataFrame(data)

    return df

# Define the directory containing the LIDAR scans
lidar_scans_dir = '/content/drive/My Drive/CV-A2-calibration/lidar_scans'

# Compute plane normals, offsets, and create DataFrame
lidar_data = compute_plane_normals_offsets(lidar_scans_dir)

# Display DataFrame
print(lidar_data)

import os
import pandas as pd

def read_camera_parameters(params_dir, image_name):
    # Initialize an empty dictionary to store data for each file
    file_data = {}

    # Iterate through each file in the directory
    for file_name in ['camera_normals.txt', 'rotation_matrix.txt', 'rotation_vectors.txt', 'translation_vectors.txt']:
        # Construct the full path to the file
        file_path = os.path.join(params_dir, image_name, file_name)

        # Read data from the file
        with open(file_path, 'r') as f:
            data = f.read()

        # Add the data to the dictionary
        file_data[file_name] = data

    return file_data

# Define the directory containing the camera parameters
camera_params_dir = '/content/drive/My Drive/CV-A2-calibration/camera_parameters/Images'

# Initialize an empty list to store DataFrame for each image
dfs = []

# Iterate over each directory (image directory) in the camera parameters directory
for image_dir in os.listdir(camera_params_dir):
    # Construct the full path to the image directory
    image_dir_path = os.path.join(camera_params_dir, image_dir)

    # Ignore .DS_Store file
    if image_dir == '.DS_Store':
        continue

    # Read camera parameters for this image
    image_camera_params = read_camera_parameters(camera_params_dir, image_dir)

    # Create a DataFrame for this image's parameters
    image_df = pd.DataFrame(image_camera_params, index=[0])

    # Add a column for the image file name
    image_df['File_Name'] = image_dir

    # Reorder the columns
    image_df = image_df[['File_Name', 'camera_normals.txt', 'rotation_matrix.txt', 'rotation_vectors.txt', 'translation_vectors.txt']]

    # Append the DataFrame to the list of DataFrames
    dfs.append(image_df)

# Concatenate all DataFrames into a single DataFrame
cam_param = pd.concat(dfs, ignore_index=True)

# Display DataFrame containing camera parameters
print(cam_param)

cam_param.head(5)

"""# reading the camera intrinsic parameters and distortion coefficients"""

import numpy as np

# Read the contents of camera intrinsic parameters file and store in a numpy array
with open('/content/drive/My Drive/CV-A2-calibration/camera_parameters/camera_intrinsic.txt', 'r') as file:
    camera_intrinsic_lines = file.readlines()

# Convert each line to a numpy array of floats
camera_intrinsic_data = np.array([list(map(float, line.strip().split())) for line in camera_intrinsic_lines])

print("Camera Intrinsic Parameters:")
print(camera_intrinsic_data)

# Read the contents of distortion coefficients file and store in a numpy array
with open('/content/drive/My Drive/CV-A2-calibration/camera_parameters/distortion.txt', 'r') as file:
    distortion_lines = file.readlines()

# Convert each line to a numpy array of floats
distortion_coefficients_data = np.array([list(map(float, line.strip().split())) for line in distortion_lines])

print("Distortion Coefficients:")
print(distortion_coefficients_data)

# Modify the 'File_Name' column in cam_param and lidar_data to create a common identifier
cam_param['Common_ID'] = cam_param['File_Name'].str.split('.').str[0]  # Extracts the file name without extension
lidar_data['Common_ID'] = lidar_data['File_Name'].str.split('.').str[0]  # Extracts the file name without extension

# Merge the cam_param and lidar_data DataFrames on the 'Common_ID' column
data = pd.merge(cam_param, lidar_data, on='Common_ID')

# Drop the 'Common_ID' column as it's no longer needed
data.drop(columns='Common_ID', inplace=True)

data.head(5)